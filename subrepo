#!/bin/bash
#
# git-subrepo common functions
#
# Copyright (C) Brecht Machiels <brecht@mos6581.org>
#

require_work_tree

GIT_TOP_LEVEL=$(git rev-parse --show-toplevel)

debug()
{
    if [ -n "$debug" ]; then
        echo "$@" >&2
    fi
}

say()
{
    if [ -z "$quiet" ]; then
        echo "$@" >&2
    fi
}

assert()
{
    if "$@"; then
        :
    else
        die "assertion failed: " "$@"
    fi
}

length()
{
    echo $#;
}

short()
# Return abbreviated (but still unique) version for each of the SHA-1 values
# in $sha1s.
{
    sha1s=$@
    result=

    for sha1 in $sha1s; do
        result="$result $(git rev-parse --short $sha1)"
    done
    echo $result
}

read_subrepo_dirs()
# Reads the subrepo directories from .gitsubrepos (one per line) and returns
# them as a list. If no .gitsubrepos file is found, returns and empty list.
{
    dotfile="$GIT_TOP_LEVEL/.gitsubrepos"

    if [ -f $dotfile ]; then
        cat $dotfile |
        while read line; do
            echo "$line"
        done
    fi
}

find_last_subrepo_commit()
# Return the commit-ish of the last $subdir subrepo commit.
{
    commit="$1"
    subdir="$2"

    debug "[D] CALL $FUNCNAME(commit=$(short $commit), subdir='$subdir')"
    
    git rev-list --merges --parents --topo-order $commit |
    while read rev main_parent parents; do
        subrepo_parent=$(get_subrepo_parent "$rev" "$parents" "$subdir")
        if [[ -n $subrepo_parent ]]; then
            debug "[D] RTRN $FUNCNAME -> $(short $subrepo_parent)"
            echo $subrepo_parent
            break
        fi
    done || exit $?
}

get_subrepo_parent()
# Assuming $commit is a subtree merge commit, returns the commit-ish of the
# parent of $commit that represents the subtree $subdir.
{
    commit="$1"
    parents="$2"
    subdir="$3"

    debug "[D] CALL $FUNCNAME(commit=$(short $commit), subdir='$subdir')"
    
    subrepo_tree=$(subtree_for_commit $commit $subdir)
    for parent in $parents; do
        parent_tree=$(toptree_for_commit $parent)
        if [[ "$parent_tree" = "$subrepo_tree" ]]; then
            echo $parent
        fi
    done || exit $?
}

toptree_for_commit()
# Return the tree-ish for the root directory in $commit.
#
# (borrowed from git-subtree)
{
    commit="$1"

    debug "[D] CALL $FUNCNAME(commit=$(short $commit)"

    # TODO: replace with plumbing
    git show -s --format=format:%T "$commit" -- || exit $?
}

subtree_for_commit()
# Return the tree-ish for $subdir in $commit.
#
# (borrowed from git-subtree)
{
    commit="$1"
    subdir="$2"

    debug "[D] CALL $FUNCNAME(commit=$(short $commit), subdir='$subdir')"

    git ls-tree "$commit" -- "$subdir" |
    while read mode type tree name; do
        assert [ "$name" = "$subdir" ]
        assert [ "$type" = "tree" -o "$type" = "commit" ]
        [ "$type" = "commit" ] && continue  # ignore submodules
        echo $tree
        break
    done
}

has_subrepo_changes()
# Check whether $commit contains changes to files in $subdir.
{
    commit="$1"
    subdir="$2"

    debug "[D] CALL $FUNCNAME(commit=$(short $commit), subdir='$subdir')"

    ! git diff-tree --exit-code --quiet "$commit" -- "$subdir" >/dev/null
}

make_parent_args()
# Takes a list of parent commit-ishes and returns the argument list that can
# be passed to git-commit-tree.
#
# $ make_parent_args 0e4fb0 4e988 c01cbf
# > -p 0e4fb0 -p 4e988 -p c01cbf
{
    parents=$@
    result=
    
    debug "[D] CALL $FUNCNAME(parents='$(short $parents)')"

    for parent in $parents; do
        result="$result -p $parent"
    done
    echo $result
}

clone_commit()
# Create a new commit consisting of:
# - the metadata of $source_commit
# - the directory tree described by the tree-ish $tree
# - the parents listed in $parents
#
# (borrowed from git-subtree)
{
    source_commit="$1"
    tree="$2"
    parents="$3"
    
    debug "[D] CALL $FUNCNAME(source_commit=$(short $source_commit), tree=$(short $tree), parents='$(short $parents)')"

    parent_args=$(make_parent_args $parents)

    # We're going to set some environment vars here, so
    # do it in a subshell to get rid of them safely later
    git log -1 --pretty=format:'%an%n%ae%n%ad%n%cn%n%ce%n%cd%n%B' "$source_commit" |
    (
        read GIT_AUTHOR_NAME
        read GIT_AUTHOR_EMAIL
        read GIT_AUTHOR_DATE
        read GIT_COMMITTER_NAME
        read GIT_COMMITTER_EMAIL
        read GIT_COMMITTER_DATE
        export GIT_AUTHOR_NAME \
            GIT_AUTHOR_EMAIL \
            GIT_AUTHOR_DATE \
            GIT_COMMITTER_NAME \
            GIT_COMMITTER_EMAIL \
            GIT_COMMITTER_DATE
        (echo -n "$annotate"; cat ) |
        git commit-tree $parent_args $tree  # reads the rest of stdin
    ) || die "Can't clone commit $source_commit"
}

